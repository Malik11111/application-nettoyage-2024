import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';
import { generateNassimaTemplate, generateTasksFromTemplate } from '../services/templateGenerator';

const prisma = new PrismaClient();

async function setupNassimaProfile() {
  try {
    console.log('üöÄ Configuration du profil Nassima...');

    // 1. Cr√©er un admin si n√©cessaire
    let admin = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    });

    if (!admin) {
      const hashedPassword = await bcrypt.hash('admin123', 10);
      admin = await prisma.user.create({
        data: {
          email: 'admin@cleaning.com',
          name: 'Administrateur',
          role: 'ADMIN',
          password: hashedPassword,
        }
      });
      console.log('‚úÖ Compte administrateur cr√©√©');
    }

    // 2. G√©n√©rer le template Nassima avec tous les lieux
    console.log('üìã G√©n√©ration du template Nassima...');
    const template = await generateNassimaTemplate();
    console.log('‚úÖ Template Nassima cr√©√© avec succ√®s');

    // 3. G√©n√©rer les t√¢ches pour aujourd'hui
    const today = new Date();
    console.log('üìÖ G√©n√©ration des t√¢ches pour aujourd\'hui...');
    const todayTasks = await generateTasksFromTemplate(template.id, today);
    console.log(`‚úÖ ${todayTasks.length} t√¢ches g√©n√©r√©es pour aujourd'hui`);

    // 4. G√©n√©rer les t√¢ches pour demain
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    console.log('üìÖ G√©n√©ration des t√¢ches pour demain...');
    const tomorrowTasks = await generateTasksFromTemplate(template.id, tomorrow);
    console.log(`‚úÖ ${tomorrowTasks.length} t√¢ches g√©n√©r√©es pour demain`);

    console.log('\nüéâ Configuration termin√©e !');
    console.log('\nüìä R√©sum√© :');
    console.log(`- Agent : Nassima (nassima@cleaning.com)`);
    console.log(`- Template : ${template.name}`);
    console.log(`- Lieux configur√©s : 13 lieux sur le RDC`);
    console.log(`- T√¢ches aujourd'hui : ${todayTasks.length}`);
    console.log(`- T√¢ches demain : ${tomorrowTasks.length}`);
    console.log('\nüîë Comptes de connexion :');
    console.log(`- Admin : admin@cleaning.com / admin123`);
    console.log(`- Agent : nassima@cleaning.com / password`);
    console.log('\nüåê Interface agent : http://localhost:5173/agent');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  setupNassimaProfile()
    .then(() => {
      console.log('‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

export { setupNassimaProfile };