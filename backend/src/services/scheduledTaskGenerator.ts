import { PrismaClient } from '@prisma/client';
import { CronJob } from 'cron';
import { smartDailyStartup } from './dailyTaskGenerator';

const prisma = new PrismaClient();

/**
 * Service de g√©n√©ration automatique des t√¢ches quotidiennes
 * Fonctionne avec le planning hebdomadaire configur√© par les admins
 */

// Job principal qui s'ex√©cute chaque jour √† 6h30
let dailyTaskJob: CronJob | null = null;

export const startScheduledTaskGeneration = (): void => {
  console.log('\nüöÄ D√©marrage du syst√®me de g√©n√©ration automatique des t√¢ches...');

  // Arr√™ter le job existant s'il y en a un
  if (dailyTaskJob) {
    dailyTaskJob.stop();
    console.log('üõë Arr√™t du job pr√©c√©dent');
  }

  // Cr√©er un nouveau job qui s'ex√©cute tous les jours √† 6h00
  dailyTaskJob = new CronJob(
    '0 6 * * *', // Cron expression: 6h00 tous les jours
    async () => {
      const today = new Date();
      console.log(`\nüåÖ [${today.toLocaleString('fr-FR')}] G√©n√©ration automatique des t√¢ches quotidiennes...`);
      
      try {
        // Utiliser smartDailyStartup qui respecte le planning hebdomadaire
        await smartDailyStartup(today);
        console.log(`‚úÖ [${today.toLocaleTimeString('fr-FR')}] G√©n√©ration automatique r√©ussie!`);
      } catch (error) {
        console.error(`‚ùå [${today.toLocaleTimeString('fr-FR')}] Erreur lors de la g√©n√©ration automatique:`, error);
        
        // Envoyer une notification d'erreur (optionnel)
        await logError(error as Error, today);
      }
    },
    null, // onComplete
    true, // start
    'Europe/Paris' // timezone
  );

  console.log('‚è∞ Job programm√©: g√©n√©ration quotidienne √† 6h00 (Europe/Paris)');
  console.log('üìã Le syst√®me v√©rifiera chaque jour s\'il faut g√©n√©rer des t√¢ches selon le planning hebdomadaire');
};

export const stopScheduledTaskGeneration = (): void => {
  if (dailyTaskJob) {
    dailyTaskJob.stop();
    dailyTaskJob = null;
    console.log('üõë Syst√®me de g√©n√©ration automatique arr√™t√©');
  }
};

export const getScheduledTaskStatus = (): { isRunning: boolean; nextRun?: string } => {
  if (!dailyTaskJob) {
    return { isRunning: false };
  }

  try {
    const nextDate = dailyTaskJob.nextDate();
    return {
      isRunning: true,
      nextRun: nextDate ? nextDate.toJSDate().toLocaleString('fr-FR') : undefined
    };
  } catch (error) {
    return {
      isRunning: true,
      nextRun: 'Prochaine ex√©cution: 6h00 chaque jour'
    };
  }
};

// Test imm√©diat du syst√®me (pour d√©veloppement)
export const testScheduledGeneration = async (): Promise<void> => {
  console.log('\nüß™ Test de la g√©n√©ration automatique...');
  
  const testDate = new Date();
  console.log(`üìÖ Test pour: ${testDate.toLocaleDateString('fr-FR')}`);
  
  try {
    await smartDailyStartup(testDate);
    console.log('‚úÖ Test de g√©n√©ration automatique r√©ussi!');
  } catch (error) {
    console.error('‚ùå Test de g√©n√©ration automatique √©chou√©:', error);
    throw error;
  }
};

// Log des erreurs pour suivi
const logError = async (error: Error, date: Date): Promise<void> => {
  try {
    // Ici on pourrait enregistrer l'erreur en base de donn√©es
    // ou envoyer un email √† l'administrateur
    
    console.error(`üìù Erreur enregistr√©e pour ${date.toLocaleDateString('fr-FR')}:`, {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    // TODO: Impl√©menter notification par email ou Slack
    
  } catch (logError) {
    console.error('‚ùå Impossible d\'enregistrer l\'erreur:', logError);
  }
};

// Fonction pour forcer une g√©n√©ration imm√©diate (pour les admins)
export const forceGenerateToday = async (): Promise<void> => {
  console.log('\nüîÑ G√©n√©ration forc√©e des t√¢ches pour aujourd\'hui...');
  
  try {
    await smartDailyStartup(new Date());
    console.log('‚úÖ G√©n√©ration forc√©e r√©ussie!');
  } catch (error) {
    console.error('‚ùå G√©n√©ration forc√©e √©chou√©e:', error);
    throw error;
  }
};

// Fonction pour g√©n√©rer les t√¢ches pour une date sp√©cifique
export const generateForDate = async (targetDate: Date): Promise<void> => {
  console.log(`\nüìÖ G√©n√©ration des t√¢ches pour ${targetDate.toLocaleDateString('fr-FR')}...`);
  
  try {
    await smartDailyStartup(targetDate);
    console.log(`‚úÖ G√©n√©ration r√©ussie pour ${targetDate.toLocaleDateString('fr-FR')}!`);
  } catch (error) {
    console.error(`‚ùå G√©n√©ration √©chou√©e pour ${targetDate.toLocaleDateString('fr-FR')}:`, error);
    throw error;
  }
};

// Planning des prochaines g√©n√©rations (pour l'interface admin)
export const getUpcomingGenerations = (): Array<{ date: string; dayName: string; willGenerate: boolean }> => {
  const upcoming = [];
  const today = new Date();
  
  for (let i = 0; i < 7; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    
    const dayNames = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];
    const dayName = dayNames[date.getDay()];
    
    upcoming.push({
      date: date.toLocaleDateString('fr-FR'),
      dayName,
      willGenerate: true // sera d√©termin√© par le planning hebdomadaire
    });
  }
  
  return upcoming;
};

console.log('üìã Service de g√©n√©ration automatique des t√¢ches charg√©');